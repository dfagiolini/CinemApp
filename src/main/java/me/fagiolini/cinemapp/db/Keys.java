/*
 * This file is generated by jOOQ.
 */
package me.fagiolini.cinemapp.db;


import me.fagiolini.cinemapp.db.tables.Cinema;
import me.fagiolini.cinemapp.db.tables.Film;
import me.fagiolini.cinemapp.db.tables.Prenotazione;
import me.fagiolini.cinemapp.db.tables.Proiezione;
import me.fagiolini.cinemapp.db.tables.Sala;
import me.fagiolini.cinemapp.db.tables.Utente;
import me.fagiolini.cinemapp.db.tables.records.CinemaRecord;
import me.fagiolini.cinemapp.db.tables.records.FilmRecord;
import me.fagiolini.cinemapp.db.tables.records.PrenotazioneRecord;
import me.fagiolini.cinemapp.db.tables.records.ProiezioneRecord;
import me.fagiolini.cinemapp.db.tables.records.SalaRecord;
import me.fagiolini.cinemapp.db.tables.records.UtenteRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * cinemapp.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CinemaRecord> CINEMA_NOME_INDIRIZZO_KEY = Internal.createUniqueKey(Cinema.CINEMA, DSL.name("cinema_nome_indirizzo_key"), new TableField[] { Cinema.CINEMA.NOME, Cinema.CINEMA.INDIRIZZO }, true);
    public static final UniqueKey<CinemaRecord> CINEMA_PKEY = Internal.createUniqueKey(Cinema.CINEMA, DSL.name("cinema_pkey"), new TableField[] { Cinema.CINEMA.ID }, true);
    public static final UniqueKey<FilmRecord> FILM_PKEY = Internal.createUniqueKey(Film.FILM, DSL.name("film_pkey"), new TableField[] { Film.FILM.ID }, true);
    public static final UniqueKey<FilmRecord> FILM_TITOLO_REGIA_KEY = Internal.createUniqueKey(Film.FILM, DSL.name("film_titolo_regia_key"), new TableField[] { Film.FILM.TITOLO, Film.FILM.REGIA }, true);
    public static final UniqueKey<PrenotazioneRecord> PRENOTAZIONE_PKEY = Internal.createUniqueKey(Prenotazione.PRENOTAZIONE, DSL.name("prenotazione_pkey"), new TableField[] { Prenotazione.PRENOTAZIONE.ID }, true);
    public static final UniqueKey<PrenotazioneRecord> PRENOTAZIONE_UTENTE_ID_PROIEZIONE_ID_KEY = Internal.createUniqueKey(Prenotazione.PRENOTAZIONE, DSL.name("prenotazione_utente_id_proiezione_id_key"), new TableField[] { Prenotazione.PRENOTAZIONE.UTENTE_ID, Prenotazione.PRENOTAZIONE.PROIEZIONE_ID }, true);
    public static final UniqueKey<ProiezioneRecord> PROIEZIONE_DATA_ORA_INIZIO_DATA_ORA_FINE_SALA_ID_KEY = Internal.createUniqueKey(Proiezione.PROIEZIONE, DSL.name("proiezione_data_ora_inizio_data_ora_fine_sala_id_key"), new TableField[] { Proiezione.PROIEZIONE.DATA_ORA_INIZIO, Proiezione.PROIEZIONE.DATA_ORA_FINE, Proiezione.PROIEZIONE.SALA_ID }, true);
    public static final UniqueKey<ProiezioneRecord> PROIEZIONE_PKEY = Internal.createUniqueKey(Proiezione.PROIEZIONE, DSL.name("proiezione_pkey"), new TableField[] { Proiezione.PROIEZIONE.ID }, true);
    public static final UniqueKey<SalaRecord> SALA_CINEMA_ID_NUMERO_KEY = Internal.createUniqueKey(Sala.SALA, DSL.name("sala_cinema_id_numero_key"), new TableField[] { Sala.SALA.CINEMA_ID, Sala.SALA.NUMERO }, true);
    public static final UniqueKey<SalaRecord> SALA_PKEY = Internal.createUniqueKey(Sala.SALA, DSL.name("sala_pkey"), new TableField[] { Sala.SALA.ID }, true);
    public static final UniqueKey<UtenteRecord> UTENTE_EMAIL_KEY = Internal.createUniqueKey(Utente.UTENTE, DSL.name("utente_email_key"), new TableField[] { Utente.UTENTE.EMAIL }, true);
    public static final UniqueKey<UtenteRecord> UTENTE_NOME_KEY = Internal.createUniqueKey(Utente.UTENTE, DSL.name("utente_nome_key"), new TableField[] { Utente.UTENTE.NOME }, true);
    public static final UniqueKey<UtenteRecord> UTENTE_PKEY = Internal.createUniqueKey(Utente.UTENTE, DSL.name("utente_pkey"), new TableField[] { Utente.UTENTE.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<PrenotazioneRecord, ProiezioneRecord> PRENOTAZIONE__PRENOTAZIONE_PROIEZIONE_ID_FKEY = Internal.createForeignKey(Prenotazione.PRENOTAZIONE, DSL.name("prenotazione_proiezione_id_fkey"), new TableField[] { Prenotazione.PRENOTAZIONE.PROIEZIONE_ID }, Keys.PROIEZIONE_PKEY, new TableField[] { Proiezione.PROIEZIONE.ID }, true);
    public static final ForeignKey<PrenotazioneRecord, UtenteRecord> PRENOTAZIONE__PRENOTAZIONE_UTENTE_ID_FKEY = Internal.createForeignKey(Prenotazione.PRENOTAZIONE, DSL.name("prenotazione_utente_id_fkey"), new TableField[] { Prenotazione.PRENOTAZIONE.UTENTE_ID }, Keys.UTENTE_PKEY, new TableField[] { Utente.UTENTE.ID }, true);
    public static final ForeignKey<ProiezioneRecord, FilmRecord> PROIEZIONE__PROIEZIONE_FILM_ID_FKEY = Internal.createForeignKey(Proiezione.PROIEZIONE, DSL.name("proiezione_film_id_fkey"), new TableField[] { Proiezione.PROIEZIONE.FILM_ID }, Keys.FILM_PKEY, new TableField[] { Film.FILM.ID }, true);
    public static final ForeignKey<ProiezioneRecord, SalaRecord> PROIEZIONE__PROIEZIONE_SALA_ID_FKEY = Internal.createForeignKey(Proiezione.PROIEZIONE, DSL.name("proiezione_sala_id_fkey"), new TableField[] { Proiezione.PROIEZIONE.SALA_ID }, Keys.SALA_PKEY, new TableField[] { Sala.SALA.ID }, true);
    public static final ForeignKey<SalaRecord, CinemaRecord> SALA__SALA_CINEMA_ID_FKEY = Internal.createForeignKey(Sala.SALA, DSL.name("sala_cinema_id_fkey"), new TableField[] { Sala.SALA.CINEMA_ID }, Keys.CINEMA_PKEY, new TableField[] { Cinema.CINEMA.ID }, true);
}
