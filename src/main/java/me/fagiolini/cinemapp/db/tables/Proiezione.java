/*
 * This file is generated by jOOQ.
 */
package me.fagiolini.cinemapp.db.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import me.fagiolini.cinemapp.db.Cinemapp;
import me.fagiolini.cinemapp.db.Keys;
import me.fagiolini.cinemapp.db.tables.Film.FilmPath;
import me.fagiolini.cinemapp.db.tables.Prenotazione.PrenotazionePath;
import me.fagiolini.cinemapp.db.tables.Sala.SalaPath;
import me.fagiolini.cinemapp.db.tables.Utente.UtentePath;
import me.fagiolini.cinemapp.db.tables.records.ProiezioneRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Proiezione extends TableImpl<ProiezioneRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cinemapp.proiezione</code>
     */
    public static final Proiezione PROIEZIONE = new Proiezione();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProiezioneRecord> getRecordType() {
        return ProiezioneRecord.class;
    }

    /**
     * The column <code>cinemapp.proiezione.id</code>.
     */
    public final TableField<ProiezioneRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cinemapp.proiezione.data_ora_fine</code>.
     */
    public final TableField<ProiezioneRecord, LocalDate> DATA_ORA_FINE = createField(DSL.name("data_ora_fine"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>cinemapp.proiezione.data_ora_inizio</code>.
     */
    public final TableField<ProiezioneRecord, LocalDate> DATA_ORA_INIZIO = createField(DSL.name("data_ora_inizio"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>cinemapp.proiezione.film_id</code>.
     */
    public final TableField<ProiezioneRecord, Long> FILM_ID = createField(DSL.name("film_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cinemapp.proiezione.sala_id</code>.
     */
    public final TableField<ProiezioneRecord, Long> SALA_ID = createField(DSL.name("sala_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cinemapp.proiezione.prezzo</code>.
     */
    public final TableField<ProiezioneRecord, Double> PREZZO = createField(DSL.name("prezzo"), SQLDataType.DOUBLE.nullable(false), this, "");

    private Proiezione(Name alias, Table<ProiezioneRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Proiezione(Name alias, Table<ProiezioneRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>cinemapp.proiezione</code> table reference
     */
    public Proiezione(String alias) {
        this(DSL.name(alias), PROIEZIONE);
    }

    /**
     * Create an aliased <code>cinemapp.proiezione</code> table reference
     */
    public Proiezione(Name alias) {
        this(alias, PROIEZIONE);
    }

    /**
     * Create a <code>cinemapp.proiezione</code> table reference
     */
    public Proiezione() {
        this(DSL.name("proiezione"), null);
    }

    public <O extends Record> Proiezione(Table<O> path, ForeignKey<O, ProiezioneRecord> childPath, InverseForeignKey<O, ProiezioneRecord> parentPath) {
        super(path, childPath, parentPath, PROIEZIONE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProiezionePath extends Proiezione implements Path<ProiezioneRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ProiezionePath(Table<O> path, ForeignKey<O, ProiezioneRecord> childPath, InverseForeignKey<O, ProiezioneRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProiezionePath(Name alias, Table<ProiezioneRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProiezionePath as(String alias) {
            return new ProiezionePath(DSL.name(alias), this);
        }

        @Override
        public ProiezionePath as(Name alias) {
            return new ProiezionePath(alias, this);
        }

        @Override
        public ProiezionePath as(Table<?> alias) {
            return new ProiezionePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Cinemapp.CINEMAPP;
    }

    @Override
    public Identity<ProiezioneRecord, Long> getIdentity() {
        return (Identity<ProiezioneRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProiezioneRecord> getPrimaryKey() {
        return Keys.PROIEZIONE_PKEY;
    }

    @Override
    public List<ForeignKey<ProiezioneRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PROIEZIONE__PROIEZIONE_FILM_ID_FKEY, Keys.PROIEZIONE__PROIEZIONE_SALA_ID_FKEY);
    }

    private transient FilmPath _film;

    /**
     * Get the implicit join path to the <code>cinemapp.film</code> table.
     */
    public FilmPath film() {
        if (_film == null)
            _film = new FilmPath(this, Keys.PROIEZIONE__PROIEZIONE_FILM_ID_FKEY, null);

        return _film;
    }

    private transient SalaPath _sala;

    /**
     * Get the implicit join path to the <code>cinemapp.sala</code> table.
     */
    public SalaPath sala() {
        if (_sala == null)
            _sala = new SalaPath(this, Keys.PROIEZIONE__PROIEZIONE_SALA_ID_FKEY, null);

        return _sala;
    }

    private transient PrenotazionePath _prenotazione;

    /**
     * Get the implicit to-many join path to the
     * <code>cinemapp.prenotazione</code> table
     */
    public PrenotazionePath prenotazione() {
        if (_prenotazione == null)
            _prenotazione = new PrenotazionePath(this, null, Keys.PRENOTAZIONE__PRENOTAZIONE_PROIEZIONE_ID_FKEY.getInverseKey());

        return _prenotazione;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>cinemapp.utente</code> table
     */
    public UtentePath utente() {
        return prenotazione().utente();
    }

    @Override
    public Proiezione as(String alias) {
        return new Proiezione(DSL.name(alias), this);
    }

    @Override
    public Proiezione as(Name alias) {
        return new Proiezione(alias, this);
    }

    @Override
    public Proiezione as(Table<?> alias) {
        return new Proiezione(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Proiezione rename(String name) {
        return new Proiezione(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Proiezione rename(Name name) {
        return new Proiezione(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Proiezione rename(Table<?> name) {
        return new Proiezione(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Proiezione where(Condition condition) {
        return new Proiezione(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Proiezione where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Proiezione where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Proiezione where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Proiezione where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Proiezione where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Proiezione where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Proiezione where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Proiezione whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Proiezione whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
