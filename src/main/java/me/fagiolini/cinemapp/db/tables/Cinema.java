/*
 * This file is generated by jOOQ.
 */
package me.fagiolini.cinemapp.db.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import me.fagiolini.cinemapp.db.Cinemapp;
import me.fagiolini.cinemapp.db.Keys;
import me.fagiolini.cinemapp.db.tables.Sala.SalaPath;
import me.fagiolini.cinemapp.db.tables.records.CinemaRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Cinema extends TableImpl<CinemaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cinemapp.cinema</code>
     */
    public static final Cinema CINEMA = new Cinema();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CinemaRecord> getRecordType() {
        return CinemaRecord.class;
    }

    /**
     * The column <code>cinemapp.cinema.id</code>.
     */
    public final TableField<CinemaRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cinemapp.cinema.indirizzo</code>.
     */
    public final TableField<CinemaRecord, String> INDIRIZZO = createField(DSL.name("indirizzo"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>cinemapp.cinema.nome</code>.
     */
    public final TableField<CinemaRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>cinemapp.cinema.telefono</code>.
     */
    public final TableField<CinemaRecord, String> TELEFONO = createField(DSL.name("telefono"), SQLDataType.VARCHAR(255), this, "");

    private Cinema(Name alias, Table<CinemaRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Cinema(Name alias, Table<CinemaRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>cinemapp.cinema</code> table reference
     */
    public Cinema(String alias) {
        this(DSL.name(alias), CINEMA);
    }

    /**
     * Create an aliased <code>cinemapp.cinema</code> table reference
     */
    public Cinema(Name alias) {
        this(alias, CINEMA);
    }

    /**
     * Create a <code>cinemapp.cinema</code> table reference
     */
    public Cinema() {
        this(DSL.name("cinema"), null);
    }

    public <O extends Record> Cinema(Table<O> path, ForeignKey<O, CinemaRecord> childPath, InverseForeignKey<O, CinemaRecord> parentPath) {
        super(path, childPath, parentPath, CINEMA);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CinemaPath extends Cinema implements Path<CinemaRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CinemaPath(Table<O> path, ForeignKey<O, CinemaRecord> childPath, InverseForeignKey<O, CinemaRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CinemaPath(Name alias, Table<CinemaRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CinemaPath as(String alias) {
            return new CinemaPath(DSL.name(alias), this);
        }

        @Override
        public CinemaPath as(Name alias) {
            return new CinemaPath(alias, this);
        }

        @Override
        public CinemaPath as(Table<?> alias) {
            return new CinemaPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Cinemapp.CINEMAPP;
    }

    @Override
    public Identity<CinemaRecord, Long> getIdentity() {
        return (Identity<CinemaRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CinemaRecord> getPrimaryKey() {
        return Keys.CINEMA_PKEY;
    }

    @Override
    public List<UniqueKey<CinemaRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CINEMA_NOME_INDIRIZZO_KEY);
    }

    private transient SalaPath _sala;

    /**
     * Get the implicit to-many join path to the <code>cinemapp.sala</code>
     * table
     */
    public SalaPath sala() {
        if (_sala == null)
            _sala = new SalaPath(this, null, Keys.SALA__SALA_CINEMA_ID_FKEY.getInverseKey());

        return _sala;
    }

    @Override
    public Cinema as(String alias) {
        return new Cinema(DSL.name(alias), this);
    }

    @Override
    public Cinema as(Name alias) {
        return new Cinema(alias, this);
    }

    @Override
    public Cinema as(Table<?> alias) {
        return new Cinema(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cinema rename(String name) {
        return new Cinema(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cinema rename(Name name) {
        return new Cinema(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cinema rename(Table<?> name) {
        return new Cinema(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cinema where(Condition condition) {
        return new Cinema(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cinema where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cinema where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cinema where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cinema where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cinema where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cinema where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cinema where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cinema whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cinema whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
