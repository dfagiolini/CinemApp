/*
 * This file is generated by jOOQ.
 */
package me.fagiolini.cinemapp.db.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.Size;

import me.fagiolini.cinemapp.db.tables.Utente;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "utente",
    schema = "cinemapp",
    uniqueConstraints = {
        @UniqueConstraint(name = "utente_email_key", columnNames = { "email" }),
        @UniqueConstraint(name = "utente_nome_key", columnNames = { "nome" })
    }
)
public class UtenteRecord extends UpdatableRecordImpl<UtenteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>cinemapp.utente.id</code>.
     */
    public UtenteRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>cinemapp.utente.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>cinemapp.utente.ruolo</code>.
     */
    public UtenteRecord setRuolo(Short value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>cinemapp.utente.ruolo</code>.
     */
    @Column(name = "ruolo")
    public Short getRuolo() {
        return (Short) get(1);
    }

    /**
     * Setter for <code>cinemapp.utente.email</code>.
     */
    public UtenteRecord setEmail(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>cinemapp.utente.email</code>.
     */
    @Column(name = "email", length = 255)
    @Size(max = 255)
    public String getEmail() {
        return (String) get(2);
    }

    /**
     * Setter for <code>cinemapp.utente.nome</code>.
     */
    public UtenteRecord setNome(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>cinemapp.utente.nome</code>.
     */
    @Column(name = "nome", length = 255)
    @Size(max = 255)
    public String getNome() {
        return (String) get(3);
    }

    /**
     * Setter for <code>cinemapp.utente.password</code>.
     */
    public UtenteRecord setPassword(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>cinemapp.utente.password</code>.
     */
    @Column(name = "password", length = 255)
    @Size(max = 255)
    public String getPassword() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UtenteRecord
     */
    public UtenteRecord() {
        super(Utente.UTENTE);
    }

    /**
     * Create a detached, initialised UtenteRecord
     */
    public UtenteRecord(Long id, Short ruolo, String email, String nome, String password) {
        super(Utente.UTENTE);

        setId(id);
        setRuolo(ruolo);
        setEmail(email);
        setNome(nome);
        setPassword(password);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UtenteRecord
     */
    public UtenteRecord(me.fagiolini.cinemapp.db.tables.pojos.Utente value) {
        super(Utente.UTENTE);

        if (value != null) {
            setId(value.getId());
            setRuolo(value.getRuolo());
            setEmail(value.getEmail());
            setNome(value.getNome());
            setPassword(value.getPassword());
            resetChangedOnNotNull();
        }
    }
}
