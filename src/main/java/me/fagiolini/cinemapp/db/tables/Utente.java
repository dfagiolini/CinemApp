/*
 * This file is generated by jOOQ.
 */
package me.fagiolini.cinemapp.db.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import me.fagiolini.cinemapp.db.Cinemapp;
import me.fagiolini.cinemapp.db.Keys;
import me.fagiolini.cinemapp.db.tables.Prenotazione.PrenotazionePath;
import me.fagiolini.cinemapp.db.tables.Proiezione.ProiezionePath;
import me.fagiolini.cinemapp.db.tables.records.UtenteRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Utente extends TableImpl<UtenteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cinemapp.utente</code>
     */
    public static final Utente UTENTE = new Utente();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UtenteRecord> getRecordType() {
        return UtenteRecord.class;
    }

    /**
     * The column <code>cinemapp.utente.id</code>.
     */
    public final TableField<UtenteRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cinemapp.utente.ruolo</code>.
     */
    public final TableField<UtenteRecord, Short> RUOLO = createField(DSL.name("ruolo"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>cinemapp.utente.email</code>.
     */
    public final TableField<UtenteRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>cinemapp.utente.nome</code>.
     */
    public final TableField<UtenteRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>cinemapp.utente.password</code>.
     */
    public final TableField<UtenteRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255), this, "");

    private Utente(Name alias, Table<UtenteRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Utente(Name alias, Table<UtenteRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>cinemapp.utente</code> table reference
     */
    public Utente(String alias) {
        this(DSL.name(alias), UTENTE);
    }

    /**
     * Create an aliased <code>cinemapp.utente</code> table reference
     */
    public Utente(Name alias) {
        this(alias, UTENTE);
    }

    /**
     * Create a <code>cinemapp.utente</code> table reference
     */
    public Utente() {
        this(DSL.name("utente"), null);
    }

    public <O extends Record> Utente(Table<O> path, ForeignKey<O, UtenteRecord> childPath, InverseForeignKey<O, UtenteRecord> parentPath) {
        super(path, childPath, parentPath, UTENTE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UtentePath extends Utente implements Path<UtenteRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UtentePath(Table<O> path, ForeignKey<O, UtenteRecord> childPath, InverseForeignKey<O, UtenteRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UtentePath(Name alias, Table<UtenteRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UtentePath as(String alias) {
            return new UtentePath(DSL.name(alias), this);
        }

        @Override
        public UtentePath as(Name alias) {
            return new UtentePath(alias, this);
        }

        @Override
        public UtentePath as(Table<?> alias) {
            return new UtentePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Cinemapp.CINEMAPP;
    }

    @Override
    public Identity<UtenteRecord, Long> getIdentity() {
        return (Identity<UtenteRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UtenteRecord> getPrimaryKey() {
        return Keys.UTENTE_PKEY;
    }

    @Override
    public List<UniqueKey<UtenteRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UTENTE_EMAIL_KEY, Keys.UTENTE_NOME_KEY);
    }

    private transient PrenotazionePath _prenotazione;

    /**
     * Get the implicit to-many join path to the
     * <code>cinemapp.prenotazione</code> table
     */
    public PrenotazionePath prenotazione() {
        if (_prenotazione == null)
            _prenotazione = new PrenotazionePath(this, null, Keys.PRENOTAZIONE__PRENOTAZIONE_UTENTE_ID_FKEY.getInverseKey());

        return _prenotazione;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>cinemapp.proiezione</code> table
     */
    public ProiezionePath proiezione() {
        return prenotazione().proiezione();
    }

    @Override
    public Utente as(String alias) {
        return new Utente(DSL.name(alias), this);
    }

    @Override
    public Utente as(Name alias) {
        return new Utente(alias, this);
    }

    @Override
    public Utente as(Table<?> alias) {
        return new Utente(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Utente rename(String name) {
        return new Utente(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Utente rename(Name name) {
        return new Utente(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Utente rename(Table<?> name) {
        return new Utente(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Utente where(Condition condition) {
        return new Utente(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Utente where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Utente where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Utente where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Utente where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Utente where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Utente where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Utente where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Utente whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Utente whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
