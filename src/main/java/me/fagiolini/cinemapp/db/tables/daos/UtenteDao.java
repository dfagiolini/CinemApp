/*
 * This file is generated by jOOQ.
 */
package me.fagiolini.cinemapp.db.tables.daos;


import java.util.List;
import java.util.Optional;

import me.fagiolini.cinemapp.db.tables.Utente;
import me.fagiolini.cinemapp.db.tables.records.UtenteRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UtenteDao extends DAOImpl<UtenteRecord, me.fagiolini.cinemapp.db.tables.pojos.Utente, Long> {

    /**
     * Create a new UtenteDao without any configuration
     */
    public UtenteDao() {
        super(Utente.UTENTE, me.fagiolini.cinemapp.db.tables.pojos.Utente.class);
    }

    /**
     * Create a new UtenteDao with an attached configuration
     */
    public UtenteDao(Configuration configuration) {
        super(Utente.UTENTE, me.fagiolini.cinemapp.db.tables.pojos.Utente.class, configuration);
    }

    @Override
    public Long getId(me.fagiolini.cinemapp.db.tables.pojos.Utente object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<me.fagiolini.cinemapp.db.tables.pojos.Utente> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Utente.UTENTE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<me.fagiolini.cinemapp.db.tables.pojos.Utente> fetchById(Long... values) {
        return fetch(Utente.UTENTE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public me.fagiolini.cinemapp.db.tables.pojos.Utente fetchOneById(Long value) {
        return fetchOne(Utente.UTENTE.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<me.fagiolini.cinemapp.db.tables.pojos.Utente> fetchOptionalById(Long value) {
        return fetchOptional(Utente.UTENTE.ID, value);
    }

    /**
     * Fetch records that have <code>ruolo BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<me.fagiolini.cinemapp.db.tables.pojos.Utente> fetchRangeOfRuolo(Short lowerInclusive, Short upperInclusive) {
        return fetchRange(Utente.UTENTE.RUOLO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ruolo IN (values)</code>
     */
    public List<me.fagiolini.cinemapp.db.tables.pojos.Utente> fetchByRuolo(Short... values) {
        return fetch(Utente.UTENTE.RUOLO, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<me.fagiolini.cinemapp.db.tables.pojos.Utente> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(Utente.UTENTE.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<me.fagiolini.cinemapp.db.tables.pojos.Utente> fetchByEmail(String... values) {
        return fetch(Utente.UTENTE.EMAIL, values);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public me.fagiolini.cinemapp.db.tables.pojos.Utente fetchOneByEmail(String value) {
        return fetchOne(Utente.UTENTE.EMAIL, value);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public Optional<me.fagiolini.cinemapp.db.tables.pojos.Utente> fetchOptionalByEmail(String value) {
        return fetchOptional(Utente.UTENTE.EMAIL, value);
    }

    /**
     * Fetch records that have <code>nome BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<me.fagiolini.cinemapp.db.tables.pojos.Utente> fetchRangeOfNome(String lowerInclusive, String upperInclusive) {
        return fetchRange(Utente.UTENTE.NOME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>nome IN (values)</code>
     */
    public List<me.fagiolini.cinemapp.db.tables.pojos.Utente> fetchByNome(String... values) {
        return fetch(Utente.UTENTE.NOME, values);
    }

    /**
     * Fetch a unique record that has <code>nome = value</code>
     */
    public me.fagiolini.cinemapp.db.tables.pojos.Utente fetchOneByNome(String value) {
        return fetchOne(Utente.UTENTE.NOME, value);
    }

    /**
     * Fetch a unique record that has <code>nome = value</code>
     */
    public Optional<me.fagiolini.cinemapp.db.tables.pojos.Utente> fetchOptionalByNome(String value) {
        return fetchOptional(Utente.UTENTE.NOME, value);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<me.fagiolini.cinemapp.db.tables.pojos.Utente> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(Utente.UTENTE.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<me.fagiolini.cinemapp.db.tables.pojos.Utente> fetchByPassword(String... values) {
        return fetch(Utente.UTENTE.PASSWORD, values);
    }
}
