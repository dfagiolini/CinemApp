/*
 * This file is generated by jOOQ.
 */
package me.fagiolini.cinemapp.db.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import me.fagiolini.cinemapp.db.Cinemapp;
import me.fagiolini.cinemapp.db.Keys;
import me.fagiolini.cinemapp.db.tables.Proiezione.ProiezionePath;
import me.fagiolini.cinemapp.db.tables.Utente.UtentePath;
import me.fagiolini.cinemapp.db.tables.records.PrenotazioneRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Prenotazione extends TableImpl<PrenotazioneRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cinemapp.prenotazione</code>
     */
    public static final Prenotazione PRENOTAZIONE = new Prenotazione();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PrenotazioneRecord> getRecordType() {
        return PrenotazioneRecord.class;
    }

    /**
     * The column <code>cinemapp.prenotazione.id</code>.
     */
    public final TableField<PrenotazioneRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cinemapp.prenotazione.numero_biglietti</code>.
     */
    public final TableField<PrenotazioneRecord, Integer> NUMERO_BIGLIETTI = createField(DSL.name("numero_biglietti"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>cinemapp.prenotazione.data_prenotazione</code>.
     */
    public final TableField<PrenotazioneRecord, LocalDate> DATA_PRENOTAZIONE = createField(DSL.name("data_prenotazione"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>cinemapp.prenotazione.proiezione_id</code>.
     */
    public final TableField<PrenotazioneRecord, Long> PROIEZIONE_ID = createField(DSL.name("proiezione_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cinemapp.prenotazione.utente_id</code>.
     */
    public final TableField<PrenotazioneRecord, Long> UTENTE_ID = createField(DSL.name("utente_id"), SQLDataType.BIGINT, this, "");

    private Prenotazione(Name alias, Table<PrenotazioneRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Prenotazione(Name alias, Table<PrenotazioneRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>cinemapp.prenotazione</code> table reference
     */
    public Prenotazione(String alias) {
        this(DSL.name(alias), PRENOTAZIONE);
    }

    /**
     * Create an aliased <code>cinemapp.prenotazione</code> table reference
     */
    public Prenotazione(Name alias) {
        this(alias, PRENOTAZIONE);
    }

    /**
     * Create a <code>cinemapp.prenotazione</code> table reference
     */
    public Prenotazione() {
        this(DSL.name("prenotazione"), null);
    }

    public <O extends Record> Prenotazione(Table<O> path, ForeignKey<O, PrenotazioneRecord> childPath, InverseForeignKey<O, PrenotazioneRecord> parentPath) {
        super(path, childPath, parentPath, PRENOTAZIONE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PrenotazionePath extends Prenotazione implements Path<PrenotazioneRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PrenotazionePath(Table<O> path, ForeignKey<O, PrenotazioneRecord> childPath, InverseForeignKey<O, PrenotazioneRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PrenotazionePath(Name alias, Table<PrenotazioneRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PrenotazionePath as(String alias) {
            return new PrenotazionePath(DSL.name(alias), this);
        }

        @Override
        public PrenotazionePath as(Name alias) {
            return new PrenotazionePath(alias, this);
        }

        @Override
        public PrenotazionePath as(Table<?> alias) {
            return new PrenotazionePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Cinemapp.CINEMAPP;
    }

    @Override
    public Identity<PrenotazioneRecord, Long> getIdentity() {
        return (Identity<PrenotazioneRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PrenotazioneRecord> getPrimaryKey() {
        return Keys.PRENOTAZIONE_PKEY;
    }

    @Override
    public List<UniqueKey<PrenotazioneRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PRENOTAZIONE_UTENTE_ID_PROIEZIONE_ID_KEY);
    }

    @Override
    public List<ForeignKey<PrenotazioneRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PRENOTAZIONE__PRENOTAZIONE_PROIEZIONE_ID_FKEY, Keys.PRENOTAZIONE__PRENOTAZIONE_UTENTE_ID_FKEY);
    }

    private transient ProiezionePath _proiezione;

    /**
     * Get the implicit join path to the <code>cinemapp.proiezione</code> table.
     */
    public ProiezionePath proiezione() {
        if (_proiezione == null)
            _proiezione = new ProiezionePath(this, Keys.PRENOTAZIONE__PRENOTAZIONE_PROIEZIONE_ID_FKEY, null);

        return _proiezione;
    }

    private transient UtentePath _utente;

    /**
     * Get the implicit join path to the <code>cinemapp.utente</code> table.
     */
    public UtentePath utente() {
        if (_utente == null)
            _utente = new UtentePath(this, Keys.PRENOTAZIONE__PRENOTAZIONE_UTENTE_ID_FKEY, null);

        return _utente;
    }

    @Override
    public Prenotazione as(String alias) {
        return new Prenotazione(DSL.name(alias), this);
    }

    @Override
    public Prenotazione as(Name alias) {
        return new Prenotazione(alias, this);
    }

    @Override
    public Prenotazione as(Table<?> alias) {
        return new Prenotazione(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Prenotazione rename(String name) {
        return new Prenotazione(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Prenotazione rename(Name name) {
        return new Prenotazione(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Prenotazione rename(Table<?> name) {
        return new Prenotazione(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Prenotazione where(Condition condition) {
        return new Prenotazione(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Prenotazione where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Prenotazione where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Prenotazione where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Prenotazione where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Prenotazione where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Prenotazione where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Prenotazione where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Prenotazione whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Prenotazione whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
