/*
 * This file is generated by jOOQ.
 */
package me.fagiolini.cinemapp.db.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import me.fagiolini.cinemapp.db.tables.Cinema;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "cinema",
    schema = "cinemapp",
    uniqueConstraints = {
        @UniqueConstraint(name = "cinema_nome_indirizzo_key", columnNames = { "nome", "indirizzo" })
    }
)
public class CinemaRecord extends UpdatableRecordImpl<CinemaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>cinemapp.cinema.id</code>.
     */
    public CinemaRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>cinemapp.cinema.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>cinemapp.cinema.indirizzo</code>.
     */
    public CinemaRecord setIndirizzo(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>cinemapp.cinema.indirizzo</code>.
     */
    @Column(name = "indirizzo", length = 255)
    @Size(max = 255)
    public String getIndirizzo() {
        return (String) get(1);
    }

    /**
     * Setter for <code>cinemapp.cinema.nome</code>.
     */
    public CinemaRecord setNome(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>cinemapp.cinema.nome</code>.
     */
    @Column(name = "nome", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    public String getNome() {
        return (String) get(2);
    }

    /**
     * Setter for <code>cinemapp.cinema.telefono</code>.
     */
    public CinemaRecord setTelefono(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>cinemapp.cinema.telefono</code>.
     */
    @Column(name = "telefono", length = 255)
    @Size(max = 255)
    public String getTelefono() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CinemaRecord
     */
    public CinemaRecord() {
        super(Cinema.CINEMA);
    }

    /**
     * Create a detached, initialised CinemaRecord
     */
    public CinemaRecord(Long id, String indirizzo, String nome, String telefono) {
        super(Cinema.CINEMA);

        setId(id);
        setIndirizzo(indirizzo);
        setNome(nome);
        setTelefono(telefono);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised CinemaRecord
     */
    public CinemaRecord(me.fagiolini.cinemapp.db.tables.pojos.Cinema value) {
        super(Cinema.CINEMA);

        if (value != null) {
            setId(value.getId());
            setIndirizzo(value.getIndirizzo());
            setNome(value.getNome());
            setTelefono(value.getTelefono());
            resetChangedOnNotNull();
        }
    }
}
